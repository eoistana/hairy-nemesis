<#@ template language="C#" hostspecific="True" debug="true"
#><#@include file="..\Configuration\Manager.ttinclude"
#><#@ assembly name="$(SolutionDir)\ModuleParser\bin\Debug\ModuleParser.dll"
#><#@ assembly name="System.Core"
#><#@ import namespace="ModulesParser"
#><#@ import namespace="System.Collections.Generic"
#><#@ import namespace="System.Linq"
#><# var manager = Manager.Create(Host, GenerationEnvironment); 
var configpath = Path.GetDirectoryName(Host.TemplateFile);
var parser = new ModuleParser(configpath + "\\..\\Configuration\\CorePackage.xml");
parser.ValidateReferences();

#><# manager.StartHeader(); 
#>using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Normalized;
using Normalized.Maths;

namespace Modules.Engine
{
<# manager.EndBlock(); 
foreach(var d in parser.Data.Values)
{
	manager.StartNewFile(string.Format("{0}.generated.cs", d.Name)); #>
	<#=d.GetSummary("	")#>
	public partial class <#=d.Name#><#=d.GetBase()#>
	{
<#=d.GetFieldDeclarations("		")
#><#=d.GetListDeclarations("		")
#><#=d.GetArrayDeclarations("		")
#>
<#="\t"#>	public <#=d.Name#>(<#=d.GetCtorParams()#>)<#=d.GetBaseCtor()#>
		{
<#
	foreach(var k in d.Keys.Values)
	{#>
			this.<#=k.Ref#> = <#=k.GetName()#>;
<#
	}
	foreach(var k in d.Required.Values)
	{#>
			this.<#=k.Ref#> = <#=k.GetName()#>;
<#
	}
	foreach(var f in d.Fields.Values.Where(v=>v.Default!=null))
	{#>
			this.<#=f.Name#> = <#=f.Default#>;
<#	}
#>			On<#=d.Name#>Init();
		}

		partial void On<#=d.Name#>Init();
<#@include file="..\Configuration\ListAccess.include.tt"
#><#@include file="..\Configuration\Events.include.tt"
#>

<#@include file="..\Configuration\Messages.include.tt"
#>

	}
<# manager.EndBlock();
}
foreach(var e in parser.Events.Values)
{
	manager.StartNewFile(string.Format("{0}EventParameters.generated.cs", e.Name)); #>
	<#=e.GetSummary("	")#>
	public partial class <#=e.Name#>EventParameters
	{
		public bool Continue;
<#
	foreach(var p in e.Parameters.Values)
	{
#>		public <#=p.GetDeclaration()#>;
<#	}
#>

		public <#=e.Name#>EventParameters(<#=string.Join(", ", e.Parameters.Values.Select(p=>p.Type + " " + p.GetName()))#>)
		{
<#
	foreach(var p in e.Parameters.Values)
	{
#>			this.<#=p.Name#> = <#=p.GetName()#>;
<#
	}
#>		}

		public <#=e.Name#>EventParameters(<#=e.Name#>EventParameters e)
		{
			Continue = e.Continue;
<#
	foreach(var p in e.Parameters.Values)
	{
#>			<#=p.Name#> = e.<#=p.Name#>;
<#
	}
#>		}

	}
<#
	manager.EndBlock();
}
foreach(var m in parser.Messages.Values)
{
	manager.StartNewFile(string.Format("{0}Message.generated.cs", m.Name)); #>
	public partial class <#=m.Name#>Message
	{
<#
	foreach(var p in m.Parameters.Values)
	{
#>		public <#=p.Type#> <#=p.Name#>;
<#	}
#>

		public <#=m.Name#>Message(<#=string.Join(", ", m.Parameters.Values.Select(p=>p.Type + " " + p.Name))#>)
		{
<#
	foreach(var p in m.Parameters.Values)
	{
#>			this.<#=p.Name#> = <#=p.Name#>;
<#
	}
#>		}

	}
<#
	manager.EndBlock();
}


foreach(var e in parser.Enums.Values)
{
	manager.StartNewFile(string.Format("{0}.generated.cs", e.Name));
	if(e.Flags){
#>	[Flags]
<#}#>
	public enum <#=e.Name#>
	{
<#
	foreach(var v in e.EnumValues.Values)
	{
#>		<#=v.Name#><#=v.Value!=null?" = " + v.Value:""#>,
<#
	}
#>
	}
<#
	manager.EndBlock();
}

manager.StartFooter();
#>
}
<#
	manager.EndBlock();
manager.Process(true);
 #>